<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- This is the parent project of the modules i.e. Super pom -->
	<!-- The groupId and version are inherited in the modules. -->
	<!-- In order to change the project's version number, either use property 
		in this project, or use versions-maven-plugin's set goal. This also set the 
		project version in the module projects. -->

	<groupId>hu.schonherz.java.training.hw2</groupId>
	<artifactId>SecondHomework</artifactId>
	<version>${myVersion}</version>
	<packaging>pom</packaging>

	<name>SecondHomework</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<myVersion>1.0</myVersion>
	</properties>

	<!-- dependencyManagement tag centralizes the "settings" of the dependencies 
		e.g. versions, scope, exclusions -->

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.12</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<modules>
		<module>CreationalPattern</module>
		<module>StructuralPattern</module>
		<module>BehavioralPattern</module>
	</modules>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- These plugins used when the site lifecycle occurs to run -->
	<reporting>
		<plugins>
			<!--This plugin is used to generate reports info about the project. No 
				need to set default goal or something because the maven has been configured 
				to create project info reports by default -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.9</version>
			</plugin>
			<!-- when mvn site fired, it will generate the javadoc for the project -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.3</version>
			</plugin>
			<!-- pmd analyzes the source code and looks for common programming flaws 
				like unused variables etc. and creates a report about it. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.6</version>
				<reportSets>
					<reportSet>
						<id>pmd-aggregate</id>
						<inherited>false</inherited>
						<reports>
							<!-- Only generate pmd report, not cpd -->
							<report>pmd</report>
						</reports>
						<configuration>
							<aggregate>true</aggregate>
						</configuration>
					</reportSet>
				</reportSets>
			</plugin>
			<!-- surefire plugin generates reports about the JUnit tests and their 
				results. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.19.1</version>
				<reportSets>
					<reportSet>
						<id>unit-tests-aggregate</id>
						<inherited>false</inherited>
						<reports>
							<report>report</report>
						</reports>
						<configuration>
							<aggregate>true</aggregate>
						</configuration>
					</reportSet>
				</reportSets>
			</plugin>
			<!-- The JXR Plugin produces a cross-reference of the project's sources. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.5</version>
			</plugin>
			<!-- Cobertura tells the percentage of coverage of the JUnit tests. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<aggregate>true</aggregate>
				</configuration>
			</plugin>
			<!-- I WOULD LIKE TO use jacoco instead of cobertura IF IT WOULD HAVE 
				WORKED but for some reason the <executions> tag is not valid.... -->
			<!-- <plugin> <groupId>org.jacoco</groupId> <artifactId>jacoco-maven-plugin</artifactId> 
				<version>0.7.6.201602180812</version> <executions> <execution> <id>pre-unit-test</id> 
				<goals> <goal>prepare-agent</goal> </goals> <configuration> <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile> 
				<propertyName>surefireArgLine</propertyName> </configuration> </execution> 
				<execution> <id>post-unit-test</id> <phase>test</phase> <goals> <goal>report</goal> 
				</goals> <configuration> <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile> 
				<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory> 
				</configuration> </execution> </executions> </plugin> -->
		</plugins>
	</reporting>

</project>